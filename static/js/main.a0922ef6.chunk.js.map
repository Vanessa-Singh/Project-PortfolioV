{"version":3,"sources":["components/headline/Headline.js","components/button/Button.js","components/search/Search.js","pages/Main.js","components/weather/Weather.js","pages/Current.js","pages/Forecast.js","pages/Error404.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Headline","props","className","key","id","pgTitle","Button","btnText","Search","name","onSubmit","get_weather","type","placeholder","onChange","takecity","value","city","takecountry","country","Main","e","a","preventDefault","target","location","sessionStorage","setItem","JSON","stringify","history","push","this","Component","Weather","console","log","cName","val","icon","src","alt","description","temperature","date","minTemp","maxTemp","humidity","windSpeed","winddeg","apiKey","Current","state","forecast","fetch","thecall","status","pathname","error","statusText","json","data","change_state","month_name","getMonth","sys","setState","Date","getDate","weather","Math","round","main","temp","temp_min","temp_max","wind","speed","deg","getItem","parse","headline","map","to","Forecast","fivedays","i","list","dt_txt","fiveDaysForecast","Error404","Routes","exact","path","component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0922ef6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Headline.css\";\n\nconst Headline = props => {\n  return <div className=\"headlineContainer\" key={props.id}>\n  {props.pgTitle && <h1>{props.pgTitle}</h1>}\n  </div>;\n};\nexport default Headline;\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = props => {\n  return <button className=\"Btn\">{props.btnText}</button>;\n};\nexport default Button;\n","import React from \"react\";\nimport Button from \"../button/Button\";\n//Import CSS\nimport \"./Search.css\";\n\nconst Search = props => {\n    return (\n      //Set a React attribute to call the get_weather function.\n      <form name=\"search\" onSubmit={props.get_weather}>\n        <input\n          type=\"text\"\n          name=\"city\"\n          className=\"input\"\n          placeholder=\"City\"\n          onChange={props.takecity}\n          value={props.city}\n        />\n        <input\n          type=\"text\"\n          name=\"country\"\n          className=\"input\"\n          placeholder=\"Country\"\n          onChange={props.takecountry}\n          value={props.country}\n        />\n        <Button type=\"submit\" btnText=\"Search\" />\n      </form>\n    );\n}\nexport default Search;","import React, { Component } from \"react\";\nimport Headline from \"../components/headline/Headline\";\nimport Search from \"../components/search/Search\";\n//Import CSS\nimport \"../App.css\";\nclass Main extends Component {\n  //API call function\n  //use async await with the fetch method to make HTTP calls.\n  get_weather = async e => {\n    e.preventDefault();\n    //Get the value from the search input\n    const city = e.target[0].value;\n    const country = e.target[1].value;\n\n    //Add to session storage\n    let location = { city: city, country: country };\n    sessionStorage.setItem(\"location\", JSON.stringify(location));\n\n    //redirect to Current page after submitting the form.\n    this.props.history.push(\"/Current\");\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Headline pgTitle=\"Weather Outlook\" />\n        {/* Set up a prop and set it's value to the get_weather function. */}\n        <Search get_weather={this.get_weather} />\n      </div>\n    );\n  }\n}\nexport default Main;\n\n","import React from \"react\";\nimport \"./Weather.css\";\n\nconst Weather = props => {\nconsole.log(props);\n  let cName = \"forecast\";\n  if(props.id === 0){\n    cName = \"current\";\n  }\n  return (\n    <div className={cName} key={props.id} id={props.id}>\n      <span>\n        {props.val.icon && (\n          <p className=\"icon\">\n            <img\n              src={\n                \"http://openweathermap.org/img/wn/\" + props.val.icon + \"@2x.png\"\n              }\n              alt={props.val.description}\n            />\n          </p>\n        )}\n        {props.val.temperature && (\n          <p className=\"temp\">{props.val.temperature}°F</p>\n        )}\n      </span>\n      <span>\n        {props.val.date && <p>{props.val.date}</p>}\n        {props.val.description && (\n          <p className=\"descrip\">{props.val.description}</p>\n        )}\n        {props.val.minTemp && (\n          <p className=\"minTemp\">\n            Min Temp: <span className=\"dataValue\">{props.val.minTemp}°</span>\n          </p>\n        )}\n        {props.val.maxTemp && (\n          <p className=\"maxTemp\">\n            Max Temp: <span className=\"dataValue\">{props.val.maxTemp}°</span>\n          </p>\n        )}\n        {props.val.humidity && (\n          <p>\n            Humidity: <span className=\"dataValue\">{props.val.humidity}%</span>\n          </p>\n        )}\n        {props.val.windSpeed && props.val.winddeg && (\n          <div>\n            <p>Wind:</p>\n            <p className=\"speed\">\n              Speed: <span className=\"dataValue\">{props.val.windSpeed}mph</span>\n            </p>\n            <p className=\"direc\">\n              Direction: <span className=\"dataValue\">{props.val.winddeg}°</span>\n            </p>\n          </div>\n        )}\n      </span>\n    </div>\n  );\n};\nexport default Weather;\n","import React, { Component } from \"react\";\nimport Headline from \"../components/headline/Headline\";\nimport Search from \"../components/search/Search\";\nimport Weather from \"../components/weather/Weather\";\n//Import CSS\nimport \"../App.css\";\n//React Router\nimport { NavLink } from \"react-router-dom\";\n\n//My API key\nconst apiKey = \"24fce1779d99022f71c6aebca28a5f73\";\n\nclass Current extends Component {\n  state = {\n    forecast: []\n  };\n  componentDidMount() {\n    (async e => {\n      //Retrieve a value by the key from Storage\n      if (sessionStorage.getItem(\"location\")) {\n        //Declare a var to read the data as string then convert to JSON object\n        let location = JSON.parse(sessionStorage.getItem(\"location\"));\n\n        const thecall = await fetch(\n          `http://api.openweathermap.org/data/2.5/weather?q=${location.city},${location.country}&appid=${apiKey}&units=imperial`\n        );\n        if (thecall.status !== 200) {\n          //redirect to a 404 page.\n          this.props.history.push({\n            pathname: \"/Error404\",\n            state: {\n              error: `Error ${thecall.status}: City ${thecall.statusText}`\n            }\n          });\n        } else {\n          //convert the response to JSON format\n          const data = await thecall.json();\n          this.change_state(data);\n        }\n      }\n    })();\n  }\n  //API call function\n  //use async await with the fetch method to make HTTP calls.\n  get_weather = async e => {\n    e.preventDefault();\n    //Get the value from the search input\n    const city = e.target[0].value;\n    const country = e.target[1].value;\n\n    //Add to session storage\n    let location = { city: city, country: country };\n    sessionStorage.setItem(\"location\", JSON.stringify(location));\n\n    const thecall = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=imperial`\n    );\n    if (thecall.status !== 200) {\n      //redirect to a 404 page.\n      this.props.history.push({\n        pathname: \"/Error404\",\n        state: {\n          error: `Error ${thecall.status}: City ${thecall.statusText}`\n        }\n      });\n    } else {\n      //convert the response to JSON format\n      const data = await thecall.json();\n      this.change_state(data);\n    }\n  };\n  //change month number to month name\n  month_name = date => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n    return months[date.getMonth()];\n  };\n  change_state = data => {\n    if (data.name && data.sys.country) {\n      this.setState({\n        //Set all the keys and values from within forecast with the updated values to the state.\n        forecast: [\n          {\n            date: `${new Date().getDate()} ${this.month_name(new Date())}`,\n            icon: data.weather[0].icon,\n            temperature: Math.round(data.main.temp),\n            description: data.weather[0].description,\n            minTemp: Math.round(data.main.temp_min),\n            maxTemp: Math.round(data.main.temp_max),\n            city: data.name,\n            country: data.sys.country,\n            humidity: Math.round(data.main.humidity),\n            windSpeed: Math.round(data.wind.speed),\n            winddeg: Math.round(data.wind.deg)\n          }\n        ]\n      });\n    }\n  };\n\n  render() {\n    //Populate the headline with the city and country that it was searched\n    let headline = this.state.forecast.map((data, key) => {\n      return <Headline key={key} pgTitle={data.city + \", \" + data.country} />;\n    });\n    //Populate the forecast data to be render\n    let weather = this.state.forecast.map((data, key) => {\n      return <Weather val={data} key={key} id={key} />;\n    });\n    return (\n      <div>\n        <div className=\"searchContainer\">\n          <Search get_weather={this.get_weather} />\n        </div>\n\n        {headline}\n        <div className=\"dataContainer\">\n          <nav className=\"navContainer\">\n            <NavLink className=\"myBtn\" to=\"/\">\n              Current Weather\n            </NavLink>\n            <NavLink className=\"myBtn\" to=\"/Forecast\">\n              5-days Forecast\n            </NavLink>\n          </nav>\n          {weather}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Current;\n","import React, { Component } from \"react\";\nimport Headline from \"../components/headline/Headline\";\nimport Search from \"../components/search/Search\";\nimport Weather from \"../components/weather/Weather\";\n\n//React Router\nimport { NavLink } from \"react-router-dom\";\n\n//My API key\nconst apiKey = \"24fce1779d99022f71c6aebca28a5f73\";\n\nclass Forecast extends Component {\n  state = {\n    forecast: []\n  };\n\n  componentDidMount() {\n    (async e => {\n      let location;\n      //Retrieve a value by the key from Storage\n      if (sessionStorage.getItem(\"location\")) {\n        //Declare a var to read the data as string then convert to JSON object\n        location = JSON.parse(sessionStorage.getItem(\"location\"));\n      }\n\n      const thecall = await fetch(\n        `http://api.openweathermap.org/data/2.5/forecast?q=${location.city},${location.country}&appid=${apiKey}&units=imperial`\n      );\n      if (thecall.status !== 200) {\n        //redirect to a 404 page.\n        this.props.history.push({\n          pathname: \"/Error404\",\n          state: {\n            error: `Error ${thecall.status}: City ${thecall.statusText}`\n          }\n        });\n      } else {\n        //convert the response to JSON format\n        const data = await thecall.json();\n        this.change_state(data);\n      }\n    })();\n  }\n  //API call function\n  //use async await with the fetch method to make HTTP calls.\n  get_weather = async e => {\n    e.preventDefault();\n    //Get the value from the search input\n    const city = e.target[0].value;\n    const country = e.target[1].value;\n\n    //Add to session storage\n    let location = { city: city, country: country };\n    sessionStorage.setItem(\"location\", JSON.stringify(location));\n\n    //redirect to Current page after submitting the form.\n    this.props.history.push(\"/Current\");\n  };\n  //change month number to month name\n  month_name = date => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n    return months[date.getMonth()];\n  };\n  //Set all the keys and values from within forecast with the updated values to the state.\n  change_state = data => {\n    if (data) {\n      let fivedays = [];\n      for (let i = 0; i < 40; i += 8) {\n        fivedays[i] = {\n          date: `${new Date(data.list[i].dt_txt).getDate()} ${this.month_name(\n            new Date(data.list[i].dt_txt)\n          )}`,\n          icon: data.list[i].weather[0].icon,\n          temperature: Math.round(data.list[i].main.temp),\n          description: data.list[i].weather[0].description,\n          minTemp: Math.round(data.list[i].main.temp_min),\n          maxTemp: Math.round(data.list[i].main.temp_max),\n          city: data.city.name,\n          country: data.city.country,\n          humidity: Math.round(data.list[i].main.humidity),\n          windSpeed: Math.round(data.list[i].wind.speed),\n          winddeg: Math.round(data.list[i].wind.deg)\n        };\n      }\n      this.setState({\n        forecast: fivedays\n      });\n    } \n  };\n\n  render() {\n    let headline = this.state.forecast.map((data, key) => {\n      if (key < 1) {\n        return <Headline key={0} pgTitle={data.city + \", \" + data.country} />;\n      }\n      return \"\";\n    });\n    //Populate the forecast data to be render\n    let fiveDaysForecast = this.state.forecast.map((data, key) => {\n      //Validate if the forecast doesn't have any data then notify user\n      return <Weather val={data} key={key} />;\n    });\n    return (\n      <div>\n        <div className=\"searchContainer\">\n          <Search get_weather={this.get_weather} />\n        </div>\n        {headline}\n        <div className=\"dataContainer\">\n          <nav className=\"navContainer\">\n            <NavLink className=\"myBtn\" to=\"/Current\">\n              Current Weather\n            </NavLink>\n            <NavLink className=\"myBtn\" to=\"/Forecast\">\n              5-days Forecast\n            </NavLink>\n          </nav>\n          <span className=\"fivedays\">{fiveDaysForecast}</span>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Forecast;\n","import React, { Component } from \"react\";\nimport Headline from \"../components/headline/Headline\";\nimport Search from \"../components/search/Search\";\n//Import CSS\nimport \"../App.css\";\nclass Error404 extends Component {\n  //API call function\n  //use async await with the fetch method to make HTTP calls.\n  get_weather = async e => {\n    e.preventDefault();\n    //Get the value from the search input\n    const city = e.target[0].value;\n    const country = e.target[1].value;\n\n    //Add to session storage\n    let location = { city: city, country: country };\n    sessionStorage.setItem(\"location\", JSON.stringify(location));\n\n    //redirect to Current page after submitting the form.\n    this.props.history.push(\"/Current\");\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Headline pgTitle={this.props.location.state.error} />\n        <div className=\"bkg\">\n          <p>\n            <img\n              alt=\"not found\"\n              src=\"https://media.giphy.com/media/d2jjuAZzDSVLZ5kI/source.gif\"\n            />{\" \"}\n          </p>\n          <div>\n            <p className=\"errorMessage\">\n              It seems we don't have data for that location. <br /> Let's try\n              one more time. Type the city and country of the location which you\n              would like to see its weather.\n            </p>\n            <div className=\"searchContainer\">\n              {/* Set up a prop and set it's value to the get_weather function. */}\n              <Search get_weather={this.get_weather} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Error404;\n","import React, { Component } from \"react\";\n//React Router\nimport { Route, Switch } from \"react-router-dom\";\n//Pages\nimport Main from \"../pages/Main\";\nimport Current from \"../pages/Current\";\nimport Forecast from \"../pages/Forecast\";\nimport Error404 from \"../pages/Error404\";\n\n\n//Import CSS stylesheet\nimport \"../App.css\";\nclass Routes extends Component {\n  render() {\n    return (\n      <section className=\"content main-content\">\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/Current\" component={Current} />\n          <Route exact path=\"/Forecast\" component={Forecast} />\n          <Route exact path=\"/Error404\" component={Error404} />\n        </Switch>\n      </section>\n    );\n  }\n}\n\nexport default Routes;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Routes from \"./components/Routes\";\n\n//React Router\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Router>\n          <Routes />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}